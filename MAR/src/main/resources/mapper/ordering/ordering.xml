<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sist.mar.ordering">


	<!-- 
		Mybatis 주요 개념
	
		parameterType   : 변수가 어디서 기원했는지에 대한 내용
		resultType 		: 결과값의 타입  
		resultMap		: 참고한 resultMap 
	 -->

	<select id="doSelectItemList" parameterType="Orderitem" resultType="Orderitem">
	
		SELECT t1.orderitem_no 		    AS orderitemNo,
		       t4.path || t4.save_name  AS image_path,
		       t1.order_no 		    	AS orderNo,
		       t1.item_no 		    	AS itemNo,
		       t1.quantity,
		       t1.review_state 			AS reviewState,
		       COUNT(*) OVER() 		    AS totalCnt,
		       t2.order_date 		    AS orderDate,
		       t3.name				    AS item_name
		FROM  orderitem t1
		        , ordering t2
		        , item t3
		        , image t4
		WHERE t1.order_no = #{orderNo}
		AND   t1.order_no = t2.order_no
		AND   t1.item_no = t3.item_no      
		AND   t1.item_no = t4.from_no
		AND   t4.main_image = 1
		AND   t4.from_tb = 1
		ORDER BY t1.orderitem_no ASC
			
	</select>


	<!-- doUndoRequest -->
	<update id="doUndoRequest" parameterType="Ordering">
	
		UPDATE ordering
		SET   order_state = '2'
		WHERE order_no = #{orderNo}
	
	</update>


	<!-- doSelectOne -->
	<select id="doSelectOne" parameterType="Ordering" resultType="Ordering">
	
		SELECT
		    order_no		AS orderNo,
		    member_id		AS memberId,
		    price,
		    name,
		    phone,
		    address,
		    request,
		    order_state		AS orderState,
		    order_date		AS orderDate
		FROM
		    ordering
		WHERE order_no = #{orderNo}   
	
	</select>


	<!-- doRetrieve -->
 	<select id="doRetrieve" parameterType="Search" resultType="Ordering">

		SELECT  
		         t2.rnum			AS num
		        , t2.path           AS image_path  
		        , t2.order_no       AS orderNo
		        , t2.member_id      AS memberId
		        , t2.price
		        , t2.name
		        , t2.phone
		        , t2.address
		        , t2.request
		        , t2.item_name
		        , t2.order_state    AS orderState
		        , t2.order_date     AS orderDate
		        , t2.orderItemCnt
		        , t2.totalCnt		AS totalCnt
		FROM(
		        SELECT ROWNUM rnum
		                , t1.*
		                , COUNT(*) OVER() totalCnt
		        FROM(
		                SELECT 
		                        C.path || C.save_name AS path
		                       , A.*
		                       , B.orderitem_no
		                       , D.name				  AS item_name
		                       , COUNT(*) OVER(PARTITION BY A.order_no) orderItemCnt
		                FROM 
		                     ordering A
		                     , orderitem B 
		                     , image C
		                     , item D
		                WHERE A.order_no = B.order_no 
		                AND B.item_no = C.from_no
		                AND B.item_no = D.item_no
		                AND C.main_image = 1
		                AND C.from_tb = 1
		                AND A.member_id = #{searchWord}
		                ORDER BY A.order_no DESC      
		             )t1
				WHERE (t1.order_no , t1.orderitem_no) 
                    	IN (SELECT t1.order_no
                               	 , MAX(t1.orderitem_no) 
	                        FROM orderitem t1 
	                        GROUP BY t1.order_no)     
		        )t2
		WHERE rnum BETWEEN #{pageSize} * (#{pageNum} - 1) + 1 AND #{pageSize} * (#{pageNum} - 1) + #{pageSize}

	</select>

	<select id="yebin_doRetrieve_ordering" parameterType="Ordering" resultType="Ordering">
		SELECT order_no AS orderNo
    	FROM ordering
    	WHERE order_state = 1
    	<![CDATA[AND 1 <= SYSDATE - order_date ]]>
    	  AND member_id = #{memberId}
	</select>
	
	<select id="yebin_doRetrieve_orderitem" parameterType="Orderitem" resultType="Orderitem">
		SELECT item_no AS itemNo,
		       quantity
		FROM orderitem
		WHERE order_no = #{orderNo}
	</select>

	<update id="yebin_doUpdate_Ordering" parameterType="Ordering">
		UPDATE ordering 
		SET order_state = 4
		WHERE order_no = #{orderNo}
	</update>

	<update id="yebin_doUpdate_item" parameterType="Orderitem">
		UPDATE item
		SET sales = sales + #{quantity}
		WHERE item_no = #{itemNo}
	</update>

</mapper>